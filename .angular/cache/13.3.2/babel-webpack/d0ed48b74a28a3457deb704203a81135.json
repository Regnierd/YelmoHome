{"ast":null,"code":"import { Film } from '../data/pelicula';\nimport { Category } from '../data/category';\nimport { Observable, of } from 'rxjs';\nimport { User } from '../data/user';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let ConnectionServerService = /*#__PURE__*/(() => {\n  class ConnectionServerService {\n    /**\n     * Contructor del servicio que llama a la funcion que trae todas las peliculas del servidor\n     * @param httpClient\n     * @param router\n     */\n    constructor(httpClient, router) {\n      this.httpClient = httpClient;\n      this.router = router;\n      this.category = [];\n      this.selectedFilm = new Film();\n      this.film = new Film();\n      this.filmsArray = [];\n      this.user = new User(); //URL estatica del servidor\n\n      this.url = \"http://localhost/PHP/yelmohome_servidor/controlador/\";\n      this.getFilms();\n    }\n    /**\n     * Funcion para obtener todas las peliculas separadas por sus categorias\n     */\n\n\n    getFilms() {\n      this.httpClient.get(`${this.url}mostrarVistaControlador.php`).subscribe(datos => {\n        datos.forEach(element => {\n          let name_category = element[\"category\"];\n          let films = element[\"films\"];\n          films.forEach(p => {\n            if (!this.filmsArray.includes(p)) {\n              this.filmsArray.push(p);\n            }\n          });\n          let category = new Category();\n          category.name_category = name_category;\n          category.films = films;\n          this.category.push(category);\n        });\n      });\n    }\n    /**\n     * Funcion que comprueba si el usuario existe, si existe se loguea, si no existe envia un mensaje\n     * @param name_user\n     * @param password\n     * @returns\n     */\n\n\n    login(name_user, password) {\n      return this.httpClient.post(`${this.url}loginControllerUser.php`, JSON.stringify({\n        \"name_user\": name_user,\n        \"password\": password\n      })).subscribe(datos => {\n        if (datos[\"resultado\"] == \"NO\") {\n          alert(datos[\"menssage\"]);\n        } else {\n          let id = datos[\"id_user\"];\n          let name_user = datos[\"name_user\"];\n          let password = datos[\"password\"];\n          let email = datos[\"email\"];\n          let fileName = datos[\"fileName\"];\n          this.user.id_user = id;\n          this.user.name_user = name_user;\n          this.user.password = password;\n          this.user.email = email;\n          this.user.fileName = fileName;\n          console.log(this.user);\n          this.router.navigate(['/home']);\n        }\n\n        if (this.user != null && this.user.name_user != \"\") {\n          localStorage.setItem(\"user\", JSON.stringify(this.user));\n        }\n      });\n    }\n\n    register(name_user, password, email) {\n      return this.httpClient.post(`${this.url}insertControllerUser.php`, JSON.stringify({\n        \"name_user\": name_user,\n        \"password\": password,\n        \"email\": email\n      }));\n    }\n\n    update(id_user, name_user, password, email) {\n      return this.httpClient.post(`${this.url}updateControllerUser.php`, JSON.stringify({\n        \"id_user\": id_user,\n        \"name_user\": name_user,\n        \"password\": password,\n        \"email\": email\n      }));\n    }\n\n    updateFilm(id_film, title, author, description, rating, img, premiere, video) {\n      return this.httpClient.post(`${this.url}updateControllerFilm.php`, JSON.stringify({\n        \"id_film\": id_film,\n        \"title\": title,\n        \"author\": author,\n        \"description\": description,\n        \"rating\": rating,\n        \"img\": img,\n        \"premiere\": premiere,\n        \"video\": video\n      }));\n    }\n\n    deleteUser(id_user) {\n      return this.httpClient.post(`${this.url}deleteControllerUser.php`, JSON.stringify({\n        \"id_user\": id_user\n      }));\n    }\n\n    deleteFilm(id_film) {\n      return this.httpClient.post(`${this.url}deleteControllerFilm.php`, JSON.stringify({\n        \"id_film\": id_film\n      }));\n    }\n    /**\n     * Funcion que obtiene la pelicula por la id de la pelicula seleccionada\n     * @param id de la pelicula\n     * @returns pelicula\n     */\n\n\n    getPelicula(id) {\n      const pelicula = this.filmsArray.find(h => h.id_film == id);\n\n      if (pelicula == undefined) {\n        return new Observable();\n      }\n\n      return of(pelicula);\n    }\n\n  }\n\n  ConnectionServerService.ɵfac = function ConnectionServerService_Factory(t) {\n    return new (t || ConnectionServerService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  ConnectionServerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ConnectionServerService,\n    factory: ConnectionServerService.ɵfac,\n    providedIn: 'root'\n  });\n  return ConnectionServerService;\n})();","map":null,"metadata":{},"sourceType":"module"}